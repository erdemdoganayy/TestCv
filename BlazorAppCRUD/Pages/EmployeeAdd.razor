@page "/EmployeeAdd"
@using BlazorAppCRUD.Data
@using BlazorAppCRUD.Persistence
@using BlazorAppCRUD.Services
@using Microsoft.EntityFrameworkCore
@inject IEmployeeService _employeeService
@inject IEducationService _educationService
@inject ICityService _cityService
@inject IDistrictService _districtService
@inject IApplicationDbContext _context


<h3>EmployeeAdd</h3>
@if (employees == null)
{
    <p>
        <em>
            Loading...
        </em>
    </p>
}
else
{
    <ListEmployeeComponent employees="@employees" />
}
<br />
<br />
<br />
<h1> Add a new employee</h1>

@if (employeeSaved)
{
    <AlertComponent Content="Personal information saved !" Title="Congratulations !" Type="success" />

}

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <input form="Name" class="form-control" @bind="employee.Name" />
            </div>
            <div class="form-group">
                <label for="Email" class="control-label">Email</label>
                <input form="Email" class="form-control" @bind="employee.Email" />
            </div>
            <div class="form-group">
                <label for="Gender" class="control-label">Gender</label>
                <select class="form-select" aria-label="Default select example" @bind="employee.Gender">
                    <option value="">-Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>
            <div class="form-group">
                <label for="Age" class="control-label">Age</label>
                <input form="Age" class="form-control" @bind="employee.Age" />
            </div>

            <label for="City" class="control-label">City</label>
            <select class="form-select" aria-label="Default select example" @onchange="DoStuff">

                <option value="">-Select City</option>

                @if (@cities != null)
                {
                    @foreach (var city in cities)
                    {
                        <option value="@city.Code">@city.Name</option>
                    }

                }
            </select>
            <label for="District" class="control-label">District</label>
            <select class="form-select" aria-label="Default select example">
                @if (districts != null)
                {
                    @foreach (var district in districts)
                    {
                        <option value=@district.Id>@district.Name</option>
                    }
                }


            </select>

            <div class="form-group">
                <label for="Country" class="control-label">Country</label>
                <input form="Country" class="form-control" @bind="employee.Country" />
            </div>

        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="@CreateEmployee" value="Save" />
                <input type="button" class="btn btn-primary" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@if (employeeSaved)
{
    <ShowHideComponent employeeInfo="@employee" />
}

@code {

    List<Employee> employees = new List<Employee>();
    Employee employee = new Employee();
    List<City> cities = new List<City>();
    List<District> districts = new List<District>();
    bool employeeSaved;


    async void DoStuff(ChangeEventArgs e)
    {

        districts = await _districtService.GetDistricts(int.Parse(e.Value.ToString()));

        await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
    }

    protected override async Task OnInitializedAsync()
    {
        employees = await _employeeService.GetEmployees();
        cities = await _cityService.GetCities();
    }

    private async void CreateEmployee()
    {
        employeeSaved = await _employeeService.Create(employee);

        if (employeeSaved)
            employees = await _employeeService.GetEmployees();

        await InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }

}
