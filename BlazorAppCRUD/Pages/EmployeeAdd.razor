@page "/EmployeeAdd"
@using BlazorAppCRUD.Data
@using BlazorAppCRUD.Persistence
@using BlazorAppCRUD.Utilities.Enums
@using EnumsNET
@using Microsoft.EntityFrameworkCore
@inject IEmployeeService _employeeService
@inject IEducationService _educationService
@inject ICityService _cityService
@inject IDistrictService _districtService
@inject ICountryService _countryService
@inject IApplicationDbContext _context
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore


<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:#361B2D !important; font-size:20px">
        <b style="color:#FFF"><i class="oi oi-info"></i> Personal Info</b>
    </div>
    <div class="card-body">


        <EditForm Model="@employee" OnValidSubmit="@CreateEmployee">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <div class="row">


                    <div class="col-md-6">
                        <label for="Name"><b>Name</b></label>
                        <input type="text" class="form-control" id="Name" aria-describedby="emailHelp" @bind="employee.Name" />
                        <ValidationMessage For=@(() => employee.Name) />

                    </div>
                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>Surname</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="employee.Surname">
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>E-Mail Address</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1" disabled aria-describedby="emailHelp" @bind="employee.Email">
                    </div>
                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>Phone</b></label>
                        <input type="number" required maxlength="11" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="employee.Phone">
                    </div>
                </div>

                <div class="row mt-4">


                    <div class="col-md-6">
                        <label for="Country" class="control-label"><b>Country</b></label>
                        <select class="form-select js-example-basic-single" id="country" required aria-label="Default select example" value="@SelectedCountry" @onchange="CountryChanges">

                            <option value="">-Select Country</option>

                            @if (countries != null)
                            {
                                @foreach (var country in countries)
                                {
                                    <option value=@country.CountryId>@country.Name</option>
                                }
                            }
                        </select>

                    </div>
                    <div class="col-md-6">
                        <label for="City" class="control-label"><b>City</b></label>
                        <select class="form-select" required aria-label="Default select example" value="@SelectedCityId" @onchange="CitiesChanges">

                            <option value="">-Select City</option>

                            @if (@cities != null)
                            {
                                @foreach (var city in cities)
                                {
                                    <option value="@city.Id">@city.Name</option>
                                }

                            }
                        </select>
                    </div>

                </div>

                <div class="row mt-4">
                    <div class="col-md-6">
                        <label for="District" class="control-label"><b>District</b></label>
                        <select class="form-select" required aria-label="Default select example" @bind="employee.DistrictId">
                            <option value="">-Select District</option>
                            @if (@districts != null)
                            {
                                @foreach (var district in districts)
                                {
                                    <option value=@district.Id>@district.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>Address</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1"  aria-describedby="emailHelp" @bind="employee.Address">
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-6">
                        <label for="Birth" class="control-label"><b>Birth Date</b></label>
                        <input type="date" required class="form-control" @bind="employee.BirthDate" />
                    </div>
                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>Gender</b></label>
                        <select class="form-select" required @bind="employee.Gender">
                            <option value="">Select a gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </select>
                    </div>
                </div>



                <div class="row mt-4">

                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>Your Web Site</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="employee.Website">
                    </div>
                    <div class="col-md-6">
                        <label for="exampleInputEmail1"><b>LinkedIn Address</b></label>
                        <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="employee.Linkedin">
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-12">
                        <label for="exampleInputEmail1"><b>Job Description</b></label>
                        <input type="text" required class="form-control" id="most" aria-describedby="emailHelp" @bind="employee.JobDescription">
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-12">
                        <label for="exampleInputEmail1"><b>Career Objective</b></label>
                        <input type="text" required class="form-control" id="most" aria-describedby="emailHelp" @bind="employee.CareerObjective">
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-12">
                        <label for="exampleInputEmail1"><b>Short Biography</b></label>
                        <textarea type="text" required class="form-control" id="biography" aria-describedby="emailHelp" @bind="employee.ShortInfo">

                        </textarea>
                    </div>
                </div>


                <div class="row mt-4">
                    <div class="col-md-12 d-flex justify-content-end">
                        <div class="form-group">
                            <input type="submit" class="btn btn-success" value="Save" />
                        </div>
                    </div>
                </div>

            </div>

        </EditForm>



    </div>
</div>


@if (EmployeeCreated)
{
    <ShowHideComponent employee="@employee" />
}
@if (EmployeeUpdated)
{
    <ShowHideComponent employee="@employee" />
}
@*@functions {
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
    if (firstRender)
    {
    await jsRuntime.InvokeVoidAsync("DropDownSearch");
    firstRender = false;
    }
    }
    }*@
@code {

    List<Employee> employees = new List<Employee>();
    Employee employee = new Employee();
    List<City> cities = new List<City>();
    List<District> districts = new List<District>();
    List<Country> countries = new List<Country>();
    List<PositionType> positionTypes = new List<PositionType>();
    public string SelectedCountry { get; set; } = "";
    public string SelectedCityId { get; set; } = "";
    string SessionValue = "";
    string Message = "";
    bool EmployeeCreated;
    bool EmployeeUpdated;

    public int CountryValue { get; set; }


    async void CountryChanges(ChangeEventArgs e)
    {

        CountryValue = int.Parse(e.Value.ToString());
        employee.CountryId = CountryValue;
        cities = await _cityService.GetSelectedCities(int.Parse(e.Value.ToString()));

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    async void CitiesChanges(ChangeEventArgs e)
    {

        districts = await _districtService.GetDistricts(int.Parse(e.Value.ToString()));

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }



    protected override async Task OnInitializedAsync()
    {
        SessionValue = await oLocalStore.GetItemAsync<string>("MySessionValue");

        if (string.IsNullOrEmpty(SessionValue))

        {
            NavigationManager.NavigateTo("/");
            return;
        }
        employee.Email = SessionValue;
        var employeeControl = await _employeeService.GetEmployeeByEmail(SessionValue);
        if (employeeControl == null)
        {
            Message = "Böyle bir e mailli biri yok";
        }
        else
        {
            Message = "Böyle biri zaten var";
            employee = new Employee
                {
                    Name = employeeControl.Name,
                    Surname = employeeControl.Surname,
                    Email = employeeControl.Email,
                    Phone = employeeControl.Phone,
                    CountryId = employeeControl.CountryId,
                    DistrictId = employeeControl.DistrictId,
                    Address = employeeControl.Address,
                    BirthDate = employeeControl.BirthDate,
                    Gender = employeeControl.Gender,
                    Website = employeeControl.Website,
                    Linkedin = employeeControl.Linkedin,
                    JobDescription = employeeControl.JobDescription,
                    CareerObjective = employeeControl.CareerObjective,
                    ShortInfo = employeeControl.ShortInfo,

                };

        }
        employees = await _employeeService.GetEmployees();
        cities = await _cityService.GetCities();
        countries = await _countryService.GetCountries();
        if (employeeControl != null)
        {
            SelectedCountry = employeeControl.CountryId.ToString();
            cities = await _cityService.GetSelectedCities(int.Parse(employeeControl.CountryId.ToString()));
            SelectedCityId = employeeControl.District.CityId.ToString();
            districts = await _districtService.GetDistricts(int.Parse(SelectedCityId));
            employee.DistrictId = employeeControl.DistrictId;
        }

        await InvokeAsync(() =>
            {
                StateHasChanged();
            });

    }

    private async void CreateEmployee()
    {
        SessionValue = await oLocalStore.GetItemAsync<string>("MySessionValue");
        var employeeControl = await _employeeService.GetEmployeeByEmail(SessionValue);
        if (employeeControl == null)
        {
            positionTypes = Enum.GetValues(typeof(PositionType)).Cast<PositionType>().ToList();
            
            EmployeeCreated = await _employeeService.Create(employee);
            await jsRuntime.InvokeVoidAsync("toastr.success", "Personal Information Registered !" + "<br>" + "Please Fill The Information Below ", "Congratulations !");

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        else
        {
            employeeControl.Name = employee.Name;
            employeeControl.Surname = employee.Surname;
            employeeControl.Email = SessionValue;
            employeeControl.Phone = employee.Phone;
            employeeControl.CountryId = employee.CountryId;
            employeeControl.DistrictId = employee.DistrictId;
            employeeControl.Address = employee.Address;
            employeeControl.BirthDate = employee.BirthDate;
            employeeControl.Gender = employee.Gender;
            employeeControl.Website = employee.Website;
            employeeControl.Linkedin = employee.Linkedin;
            employeeControl.JobDescription = employee.JobDescription;
            employeeControl.CareerObjective = employee.CareerObjective;
            employeeControl.ShortInfo = employee.ShortInfo;

            EmployeeUpdated = await _employeeService.Update(employeeControl);
            await jsRuntime.InvokeVoidAsync("toastr.success", "Personal Information Updated !" + "<br>" + "Please Fill The Information Below ", "Updated !");
            await InvokeAsync(() =>
           {
               StateHasChanged();
           });
        }


    }

    }
