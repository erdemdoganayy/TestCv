@using BlazorAppCRUD.Data
@inject IUserService _userService
@inject IForgotPasswordService _forgotService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@layout LoginLayout
@page "/ResetPassword/{Token}"
@*/Login yerine / yaparsan ana sayfaya atar*@
<div class="wrapper">
    <div class="logo"> <img width=50 height=50 src="./images/logo.png" alt=""> </div>
    <div class="text-center mt-4 name"> Hepapi CV Maker </div>
    <EditForm Model="@User" OnValidSubmit="@SendEmail" class="p-3 mt-3">
        <div class="form-field d-flex align-items-center">
            <span class="far fa-user"></span>
            <input type="text" name="PasswordOne" id="PasswordOne" placeholder="Password" @bind="User.PasswordOne">
        </div>
        <div class="form-field d-flex align-items-center">
            <span class="far fa-user"></span>
            <input type="text" name="PasswordTwo" id="PasswordTwo" placeholder="Confirm" @bind="User.PasswordTwo">
        </div>
        <button type="submit" class="btn mt-3">Save</button>
    </EditForm>
    <div class="text-center fs-6"><a style="color:#4BD9B8" href="/">Return Login</a> </div>
</div>
@code {
    [Parameter]
    public string Token { get; set; }
    public User User = new User();
    string TokenSessionValue = "";
    bool UserPasswordUpdated;


    protected override async Task OnInitializedAsync()
    {
        TokenSessionValue = await oLocalStore.GetItemAsync<string>("TokenSession");
        if (TokenSessionValue != null)
        {
            var GetUserEmail = await _userService.GetUserEmail(TokenSessionValue);
            var GetForgotInfo = await _forgotService.GetUser(GetUserEmail.Id);
            if (Convert.ToString(GetForgotInfo.Token) != Token)
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

    }

    private async void SendEmail()
    {
        var GetUserEmail = await _userService.GetUserEmail(TokenSessionValue);
        var GetForgotInfo = await _forgotService.GetUser(GetUserEmail.Id);

        if (Convert.ToString(GetForgotInfo.Token) != Token)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {

            GetUserEmail.PasswordOne = User.PasswordOne;
            GetUserEmail.PasswordTwo = User.PasswordTwo;

            UserPasswordUpdated = await _userService.Update(GetUserEmail);
            if (UserPasswordUpdated)
                await jsRuntime.InvokeVoidAsync("toastr.success", "Password Changed !", "Updated !");
        }
    }


}
