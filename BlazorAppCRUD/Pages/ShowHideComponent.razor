@page "/ShowHideComponent/"
@using BlazorAppCRUD.Data
@using BlazorAppCRUD.Dtos
@using BlazorAppCRUD.Persistence
@using BlazorAppCRUD.Utilities.Enums
@using EnumsNET
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using IronPdf;
@using System.Text
@inject IJSRuntime jsRuntime

@inject IEmployeeService _employeeService
@inject IEducationService _educationService
@inject IExperienceServices _experienceService
@inject ISkillService _skilService
@inject ILanguageService _languageService
@inject ISchoolService _schoolService
@inject ISchoolDepartmentService _schoolDepartmentService
@inject ICityService _cityService
@inject ICountryService _countryService
@inject IApplicationDbContext _context



<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:white !important; font-size:20px">
        <i class="oi oi-pencil"></i> Education Info
    </div>
    <div class="card-body">

        <form>
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-3">

                        @*  <label for="exampleInputEmail1"><b>School Name</b></label>
                            <input type="text" required class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Ericson" @bind="employee.School">*@



                    </div>
                    <div class="col-md-4">
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Start Date</b></label>
                        <input type="date" class="form-control" id="exampleInputEmail1" @bind="educationDto.StartDate" aria-describedby="emailHelp" placeholder="Enter Start Date">
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>End Date</b></label>
                        <input type="date" class="form-control" id="exampleInputEmail1" @bind="educationDto.EndDate" aria-describedby="emailHelp" placeholder="Enter End Date">
                    </div>
                    <div class="col-md-1">
                        <label for="exampleInputEmail1"></label>
                        <div class="form-group">
                            <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateEducation" value="Add" />
                        </div>
                    </div>
                </div>

                <br />

            </div>
            <FirstListEducation EducationsList="@EducationsList" employee="employee" />
        </form>


    </div>
</div>


<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:white !important; font-size:20px">
        <i class="oi oi-badge" style="font-size:25px"></i> Experience Info
    </div>
    <div class="card-body">

        <form>
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Company Name</b></label>
                        <input type="text" class="form-control" id="exampleInputEmail1" @bind="experienceDto.CompanyName" aria-describedby="emailHelp" placeholder="Hepapi Technology">
                    </div>

                    <div class="col-md-2">
                        <label for="Country" class="control-label"><b>City</b></label>
                        <select class="form-select" aria-label="Default select example" @bind="experienceDto.CityId">

                            <option value="">-Select City</option>

                            @if (cities != null)
                            {
                                @foreach (var city in cities)
                                {
                                    <option value=@city.Id>@city.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Start Date</b></label>
                        <input type="date" class="form-control" id="exampleInputEmail1" @bind="experienceDto.StartDate" aria-describedby="emailHelp" placeholder="Enter Start Date">
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>End Date</b></label>
                        <input type="date" class="form-control" id="exampleInputEmail1" @bind="experienceDto.EndDate" aria-describedby="emailHelp" placeholder="Enter End Date">
                    </div>
                    <div class="col-md-2">
                        <label for="City" class="control-label"><b>Position</b></label>
                        <select class="form-select" aria-label="Default select example" @onchange="DoStuff" text="@experienceDto.Position">

                            <option value="">-Select Position</option>

                            @if (@positionTypes != null)
                            {
                                @foreach (var item in positionTypes)
                                {
                                    <option value="@item">@item.AsString(EnumFormat.Description)</option>
                                }

                            }
                        </select>
                    </div>

                    <div class="col-md-2">
                        <label hidden="@ShowMyDiv" for="exampleInputEmail1"><b>Other Position</b></label>
                        <input type="text" hidden="@ShowMyDiv" class="form-control" id="exampleInputEmail1" @bind="@PositionValue" aria-describedby="emailHelp" placeholder="">
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-12">
                            <label for="exampleInputEmail1"><b>Brief Information About The Experience</b></label>
                            <textarea type="text" required class="form-control" id="biography" aria-describedby="emailHelp" placeholder="I developed projects with .NET for 3 years at Hepapi Teknoloji company..." @bind="@experienceDto.BriefInformation">

                        </textarea>
                        </div>
                    </div>

                    <div class="col-md-1">
                        <label for="exampleInputEmail1">&nbsp</label>
                        <div class="form-group">
                            <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateExperience" value="Add" />
                        </div>
                    </div>




                </div>
            </div>
            <br />
            <FirstListExperience ExperiencesList="@ExperiencesList" employee="employee" />
        </form>

    </div>
</div>


<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:white !important; font-size:20px">
        <i class="oi oi-graph" style="font-size:25px"></i> Skill Info
    </div>
    <div class="card-body">
        <form>
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-4">
                        <label for="exampleInputEmail1"><b>Skill Name</b></label>
                        <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="skillDto.Name" placeholder=".NET">
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="Gender" class="control-label"><b>Skill Rating</b></label>
                            <select class="form-select" aria-label="Default select example" @bind="skillDto.Rating">
                                <option value=" ">-Select Rating</option>
                                <option value="Expert">Expert</option>
                                <option value="Experienced">Experienced</option>
                                <option value="Talented">Talented</option>
                                <option value="Beginning">Beginning</option>
                                <option value="Beginner">Beginner</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="form-group">
                            <label for="Gender" class="control-label"><b>Skill Short Info</b></label>
                            <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="skillDto.ShortInfo" placeholder="I made a cv generator project with .NET">
                        </div>
                    </div>
                    <div class="col-md-1">
                        <label for="exampleInputEmail1">&nbsp</label>
                        <div class="form-group">
                            <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateSkill" value="Add" />
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <FirstListSkill SkillsList="@SkillsList" employee="employee" />
        </form>
    </div>
</div>


<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:white !important; font-size:20px">
        <i class="oi oi-book" style="font-size:25px"></i> Language Info
    </div>
    <div class="card-body">

        <form>
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-4">
                        <label for="exampleInputEmail1"><b>Language Name</b></label>
                        <input type="text" class="form-control" id="exampleInputEmail1" @bind="languageDto.Name" aria-describedby="emailHelp" placeholder="English">
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="Language" class="control-label"><b>Language Rating</b></label>
                            <select class="form-select" aria-label="Default select example" @bind="languageDto.Rating">
                                <option value="">-Select Rating</option>
                                <option value="A1">A1</option>
                                <option value="A2">A2</option>
                                <option value="B1">B1</option>
                                <option value="B2">B2</option>
                                <option value="C1">C1</option>
                                <option value="C2">C2</option>

                            </select>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <label for="exampleInputEmail1">&nbsp</label>
                        <div class="form-group">
                            <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateLanguage" value="Add" />
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <FirstListLanguage LanguagesList="@LanguagesList" employee="employee" />
        </form>

    </div>

    @if (languageSaved)
    {
        <div class='col-md-12 text-center my-1'>
            <button style="color:white; text-align:center" class="btn btn-info w-25" @onclick="CreatePdf">View & Download Cv</button>
        </div>
    }

</div>




@code {
    private bool ShowMyDiv { get; set; } = true;
    public string PositionValue { get; set; }
    bool languageSaved;

    [Parameter] public Employee employee { get; set; }
    [Parameter] public int EducationSchoolId { get; set; }

    List<Education> EducationsList = new List<Education>();
    List<Experience> ExperiencesList = new List<Experience>();
    List<Language> LanguagesList = new List<Language>();
    List<Skill> SkillsList = new List<Skill>();
    List<School> Schools = new List<School>();
    List<SchoolDepartment> SchoolDepartments = new List<SchoolDepartment>();
    List<Country> countries = new List<Country>();
    List<City> cities = new List<City>();
    List<PositionType> positionTypes = new List<PositionType>();

    Education education = new Education();
    Experience experience = new Experience();
    Skill skill = new Skill();
    Language language = new Language();

    EducationDto educationDto = new EducationDto();
    ExperienceDto experienceDto = new ExperienceDto();
    Skill skillDto = new Skill();
    Language languageDto = new Language();

    async void DoStuff(ChangeEventArgs e)
    {
        experienceDto.Position = e.Value.ToString();

        if (e.Value.ToString() == "Other")
            ShowMyDiv = false;
        else
            ShowMyDiv = true;

        await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
    }

    protected override async Task OnInitializedAsync()
    {
        positionTypes = Enum.GetValues(typeof(PositionType)).Cast<PositionType>().ToList();
        Schools = await _schoolService.GetSchools();
        SchoolDepartments = await _schoolDepartmentService.GetDepartments();
        countries = await _countryService.GetCountries();
        cities = await _cityService.GetCities();
    }

    protected override async Task OnParametersSetAsync()
    {
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);
        ExperiencesList = await _experienceService.GetExperienceCompanyName(currentEmployee.Id);
    }

    private async void CreateEducation()
    {
        bool educationSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Education Edu = new Education
                {
                    EmployeeId = currentEmployee.Id,
                    Department = educationDto.Department,
                    StartDate = educationDto.StartDate,
                    EndDate = educationDto.EndDate
                };

            educationSaved = await _educationService.Create(Edu);

            if (educationSaved)
                EducationsList = await _educationService.GetEducationSchool(Edu.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }

    private async void CreateExperience()
    {
        bool experienceSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Enum.TryParse(experienceDto.Position, out PositionType positionType);

            var positionTypeDescription = positionType.AsString(EnumFormat.Description);

            Experience Exp = new Experience
                {
                    EmployeeId = currentEmployee.Id,
                    CompanyName = experienceDto.CompanyName,
                    Position = positionType == PositionType.Other ? PositionValue : positionTypeDescription,
                    BriefInformation = experienceDto.BriefInformation,
                    CityId = Convert.ToInt32(experienceDto.CityId),
                    StartDate = experienceDto.StartDate,
                    EndDate = experienceDto.EndDate
                };

            experienceSaved = await _experienceService.Create(Exp);
            if (experienceSaved)
                ExperiencesList = await _experienceService.GetExperienceCompanyName(Exp.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }

    private async void CreateSkill()
    {
        bool skillSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Skill ski = new Skill
                {
                    EmployeeId = currentEmployee.Id,
                    Name = skillDto.Name,
                    ShortInfo = skillDto.ShortInfo,
                    Rating = skillDto.Rating
                };


            skillSaved = await _skilService.Create(ski);
            if (skillSaved)

                SkillsList = await _skilService.GetSkillName(ski.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }
    private async void CreateLanguage()
    {
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Language lan = new Language
                {
                    EmployeeId = currentEmployee.Id,
                    Name = languageDto.Name,
                    Rating = languageDto.Rating
                };

            languageSaved = await _languageService.Create(lan);

            if (languageSaved)
                LanguagesList = await _languageService.GetLanguageName(lan.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }
    private async void CreatePdf()
    {
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);
        var employees = await _employeeService.GetLastEmployee(currentEmployee.Id);
        var Renderer = new ChromePdfRenderer();

        var sb = new StringBuilder();
        sb.Append("<html><head></head><body>");
        sb.Append("<div style='width: 100%; height: 10%;  class='header'>");
        sb.Append("<div style='width: 50%; height: 100%; float: left;class='left'>");
        sb.Append("<div style='font-size: 28px;'>" + employees.Name + " " + employees.Surname + "</div>");
        sb.Append("<h6 style='color: #208FBF; font-size:14px;'>" + employees.JobDescription + "</h6>");
        sb.Append("</div>");
        sb.Append("<div style='width: 50%; height: 100%; float: left;' class='right'>");
        sb.Append("<div style='float:right;'><img width=90 height=70 src='./PdfDocument/hepapilogo.png' /> </div>");
        sb.Append("</div>");
        sb.Append("</div>");
        sb.Append("<div style='width:100%; height:50px;'></div>");
        sb.Append("<div style='width: 100%; height: 100%;' class='contaniner'>");
        sb.Append("<div style='float:left; width: 50%; height: 100%;' class='left'>");
        sb.Append("<div class='experience'>");
        sb.Append("<u style='color: #218EBF;'>EXPERİENCE</u>");
        foreach (var emp in employees.Experiences)
        {
            sb.Append("<div style='margin-top:3px; color: #262627; margin-top:15px;' class='companyname'>" + emp.CompanyName + "</div>");
            sb.Append("<div style='margin-top:3px; color: #2E95C3'>" + emp.City.Name + ", Turkey" + "</div>");
            sb.Append("<div style='color: #6F6F6F;  width:95%'>" + emp.BriefInformation + "</div>");
            sb.Append("<div style='margin-top:3px; font-size:12px; color: #6F6F6F;'>" + emp.StartDate.Date.ToShortDateString() + " - " + emp.EndDate.Date.ToShortDateString() + "</div>");
        }

        sb.Append("</div>");
        sb.Append("<div  style='margin-top:15px;' class='skills'>");
        sb.Append("<u style='margin-top:15px; color: #218EBF;'>SKİLLS</u>");
        foreach (var emp in employees.Skills)
        {
            sb.Append("<div style='color: #6F6F6F; margin-top:15px;'><b>" + emp.Name + " : " + emp.Rating + "</b></div>");
            sb.Append("<div style='color: #6F6F6F; margin-top:3px; font-size:16px; width:95%'>" + emp.ShortInfo + "</div>");
        }

        sb.Append("</div>");
        sb.Append("</div>");
        sb.Append("<div style='float: left; width: 50%; height: 100%; ' class='right'>");
        sb.Append("<div class='educations'>");
        sb.Append("<u style='color: #218EBF;'>SHORT INFO</u>");
        sb.Append("<div style='color: #6F6F6F; margin-top:15px'>" + employees.ShortInfo + "</div>");
        sb.Append("</div>");
        sb.Append("<div style='margin-top:15px' class='career'>");
        sb.Append("<u style='color: #218EBF;'>CAREER OBJECTİVE</u>");
        sb.Append("<div style='color: #6F6F6F; margin-top:15px'>" + employees.CareerObjective + "</div>");
        sb.Append("</div>");
        sb.Append("<div style='margin-top:15px' class='educations'>");
        sb.Append("<u style='color: #218EBF;'>EDUCATİONS</u>");
        foreach (var emp in employees.Educations)
        {
            if (!string.IsNullOrEmpty(emp.Department))
            {
                var department = _context.SchoolDepartments.FirstOrDefault(x => x.Id == int.Parse(emp.Department));
                if (department != null)
                {
                    sb.Append("<div style='margin-top:3px; color: #262627; margin-top:15px;' class='companyname'>" + department.Name + "</div>");
                }
            }
            //sb.Append("<div style='margin-top:3px; color: #208FBF; margin-top:15px;'>" + emp.SchoolName + ", Turkey" + "</div>");
            sb.Append("<div style='margin-top:3px; font-size:12px; color: #6F6F6F;'>" + emp.StartDate.Date.ToShortDateString() + " - " + emp.EndDate.Date.ToShortDateString() + "</div>");
        }
        sb.Append("</div>");
        sb.Append("<div style='margin-top:15px' class='languages'>");
        sb.Append("<u style='color: #218EBF;'>LANGUAGES </u>");
        foreach (var emp in employees.Languages)
        {
            sb.Append("<div style='margin-top:15px; color: #6F6F6F;' class='language'>" + emp.Name + " : " + emp.Rating + "</div>");
        }

        sb.Append("</div>");
        sb.Append("</div>");
        sb.Append("</div>");



        sb.Append("</body></html>");
        string url = "/" + employees.Name + employees.Surname + ".pdf";
        Renderer.RenderHtmlAsPdf(sb.ToString()).SaveAs("./wwwroot" + url);
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}