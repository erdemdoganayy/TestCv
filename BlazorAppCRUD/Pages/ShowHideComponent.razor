@page "/ShowHideComponent/"
@using BlazorAppCRUD.Data
@using BlazorAppCRUD.Dtos
@using BlazorAppCRUD.Persistence
@using BlazorAppCRUD.Utilities.Enums
@using EnumsNET
@using Microsoft.EntityFrameworkCore
@inject IEmployeeService _employeeService
@inject IEducationService _educationService
@inject IExperienceServices _experienceService
@inject ISkillService _skilService
@inject ILanguageService _languageService
@inject ISchoolService _schoolService
@inject ISchoolDepartmentService _schoolDepartmentService
@inject ICityService _cityService
@inject ICountryService _countryService
@inject IApplicationDbContext _context


<form>
    <div class="form-group mt-3">
        <label for="exampleInputEmail1">Education</label>
        <div class="row mt-2">
            <div class="col-md-3">

                <label for="Country" class="control-label">School Name</label>
                <select class="form-select" aria-label="Default select example" @bind="educationDto.SchoolId">

                    <option value="">-Select University</option>

                    @if (Schools != null)
                    {
                        @foreach (var school in Schools)
                        {
                            <option value=@school.Id>@school.Name</option>
                        }
                    }
                </select>

            </div>
            <div class="col-md-4">

                <label for="Country" class="control-label">School Department</label>
                <select class="form-select" aria-label="Default select example" @bind="educationDto.Department">

                    <option value="">-Select Department</option>
                    @if (SchoolDepartments != null)
                    {
                        @foreach (var department in SchoolDepartments)
                        {
                            <option value=@department.Id>@department.Name</option>
                        }
                    }

                </select>
            </div>
            <div class="col-md-2">
                <label for="exampleInputEmail1">Start Date</label>
                <input type="date" class="form-control" id="exampleInputEmail1" @bind="educationDto.StartDate" aria-describedby="emailHelp" placeholder="Enter Start Date">
            </div>
            <div class="col-md-2">
                <label for="exampleInputEmail1">End Date</label>
                <input type="date" class="form-control" id="exampleInputEmail1" @bind="educationDto.EndDate" aria-describedby="emailHelp" placeholder="Enter End Date">
            </div>
            <div class="col-md-1">
                <label for="exampleInputEmail1"></label>
                <div class="form-group">
                    <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateEducation" value="Add" />
                </div>
            </div>
        </div>

        <br />

    </div>
    <FirstListEducation EducationsList="@EducationsList" employee="employee" />
</form>

<form>
    <div class="form-group mt-3">
        <label for="exampleInputEmail1">Experience</label>
        <div class="row mt-2">
            <div class="col-md-3">
                <label for="exampleInputEmail1">Company Name</label>
                <input type="text" class="form-control" id="exampleInputEmail1" @bind="experienceDto.CompanyName" aria-describedby="emailHelp" placeholder="Enter Company Name">
            </div>
            <!--   <div class="col-md-2">
                     <label for="exampleInputEmail1">Other Position</label>
                     <input type="text" class="form-control" id="exampleInputEmail1" @bind="experienceDto.Position" aria-describedby="emailHelp" placeholder="Enter Position">
                 </div> -->
            <div class="col-md-2">
                <label for="City" class="control-label">Position</label>
                <select class="form-select" aria-label="Default select example" @bind="experienceDto.Position">

                    <option value="">-Select Position</option>

                    @if (@positionTypes != null)
                    {
                        @foreach (var item in positionTypes)
                        {
                            <option value="@item">@item.AsString(EnumFormat.Description)</option>
                        }

                    }
                </select>
            </div>
            <div class="col-md-2">
                <label for="Country" class="control-label">City</label>
                <select class="form-select" aria-label="Default select example" @bind="experienceDto.CityId">

                    <option value="">-Select City</option>

                    @if (cities != null)
                    {
                        @foreach (var city in cities)
                        {
                            <option value=@city.Id>@city.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label for="exampleInputEmail1">Start Date</label>
                <input type="date" class="form-control" id="exampleInputEmail1" @bind="experienceDto.StartDate" aria-describedby="emailHelp" placeholder="Enter Start Date">
            </div>
            <div class="col-md-2">
                <label for="exampleInputEmail1">End Date</label>
                <input type="date" class="form-control" id="exampleInputEmail1" @bind="experienceDto.EndDate" aria-describedby="emailHelp" placeholder="Enter End Date">
            </div>
            <div class="col-md-1">
                <label for="exampleInputEmail1">&nbsp</label>
                <div class="form-group">
                    <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateExperience" value="Add" />
                </div>
            </div>

        </div>
    </div>
    <br />
    <FirstListExperience ExperiencesList="@ExperiencesList" employee="employee" />
</form>

<form>
    <div class="form-group mt-3">
        <label for="exampleInputEmail1">Skills</label>
        <div class="row mt-2">
            <div class="col-md-4">
                <label for="exampleInputEmail1">Skill Name</label>
                <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="skillDto.Name" placeholder="Enter Skill Name">
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="Gender" class="control-label">Rating 1-10</label>
                    <select class="form-select" aria-label="Default select example" @bind="skillDto.Rating">
                        <option value="">-Select Rating</option>
                        <option value="1">1 <span class="oi oi-home"></span></option>
                        <option value="2">2 <span class="oi oi-star"></span></option>
                        <option value="3">3 <span class="oi oi-star"></span></option>
                        <option value="4">4 <span class="oi oi-star"></span></option>
                        <option value="5">5 <span class="oi oi-star"></span></option>
                        <option value="6">6 <span class="oi oi-star"></span></option>
                        <option value="7">7 <span class="oi oi-star"></span></option>
                        <option value="8">8 <span class="oi oi-star"></span></option>
                        <option value="9">9 <span class="oi oi-star"></span></option>
                        <option value="10">10 <span class="oi oi-star"></span></option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="Gender" class="control-label">Select Skill Experience</label>
                    <select class="form-select" aria-label="Default select example" @bind="skillDto.Experience">
                        <option value="">-Select Skill Experience</option>
                        <option value="1">+1 Year<span class="oi oi-star"></span></option>
                        <option value="2">+2 Year<span class="oi oi-star"></span></option>
                        <option value="3">+3 Year<span class="oi oi-star"></span></option>
                        <option value="4">+4 Year<span class="oi oi-star"></span></option>
                        <option value="5">+5 Year<span class="oi oi-star"></span></option>
                        <option value="6">+6 Year<span class="oi oi-star"></span></option>
                        <option value="7">+7 Year<span class="oi oi-star"></span></option>
                        <option value="8">+8 Year<span class="oi oi-star"></span></option>
                        <option value="9">+9 Year<span class="oi oi-star"></span></option>
                        <option value="10">+10 Year<span class="oi oi-star"></span></option>
                    </select>
                </div>
            </div>
            <div class="col-md-1">
                <label for="exampleInputEmail1">&nbsp</label>
                <div class="form-group">
                    <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateSkill" value="Add" />
                </div>
            </div>
        </div>
    </div>
    <br />
    <FirstListSkill SkillsList="@SkillsList" employee="employee" />
</form>
<form>
    <div class="form-group mt-3">
        <label for="exampleInputEmail1">Languages</label>
        <div class="row mt-2">
            <div class="col-md-4">
                <label for="exampleInputEmail1">Language Name</label>
                <input type="text" class="form-control" id="exampleInputEmail1" @bind="languageDto.Name" aria-describedby="emailHelp" placeholder="Enter Language Name">
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="Gender" class="control-label">Rating 1-10</label>
                    <select class="form-select" aria-label="Default select example" @bind="languageDto.Rating">
                        <option value="">-Select Rating</option>
                        <option value="1">1 <span class="oi oi-flag"></span></option>
                        <option value="2">2 <span class="oi oi-star"></span></option>
                        <option value="3">3 <span class="oi oi-star"></span></option>
                        <option value="4">4 <span class="oi oi-star"></span></option>
                        <option value="5">5 <span class="oi oi-star"></span></option>
                        <option value="6">6 <span class="oi oi-star"></span></option>
                        <option value="7">7 <span class="oi oi-star"></span></option>
                        <option value="8">8 <span class="oi oi-star"></span></option>
                        <option value="9">9 <span class="oi oi-star"></span></option>
                        <option value="10">10 <span class="oi oi-star"></span></option>
                    </select>
                </div>
            </div>
            <div class="col-md-1">
                <label for="exampleInputEmail1">&nbsp</label>
                <div class="form-group">
                    <input type="button" class="btn btn-outline-success border-2" @onclick="@CreateLanguage" value="Add" />
                </div>
            </div>
        </div>
    </div>
    <br />
    <FirstListLanguage LanguagesList="@LanguagesList" employee="employee" />
</form>

@code {

    [Parameter] public Employee employee { get; set; }
    [Parameter] public int EducationSchoolId { get; set; }

    List<Education> EducationsList = new List<Education>();
    List<Experience> ExperiencesList = new List<Experience>();
    List<Language> LanguagesList = new List<Language>();
    List<Skill> SkillsList = new List<Skill>();
    List<School> Schools = new List<School>();
    List<SchoolDepartment> SchoolDepartments = new List<SchoolDepartment>();
    List<Country> countries = new List<Country>();
    List<City> cities = new List<City>();
    List<PositionType> positionTypes = new List<PositionType>();

    Education education = new Education();
    Experience experience = new Experience();
    Skill skill = new Skill();
    Language language = new Language();

    EducationDto educationDto = new EducationDto();
    ExperienceDto experienceDto = new ExperienceDto();
    Skill skillDto = new Skill();
    Language languageDto = new Language();

    protected override async Task OnInitializedAsync()
    {
        positionTypes = Enum.GetValues(typeof(PositionType)).Cast<PositionType>().ToList();
        Schools = await _schoolService.GetSchools();
        SchoolDepartments = await _schoolDepartmentService.GetDepartments();
        countries = await _countryService.GetCountries();
        cities = await _cityService.GetCities();
    }


    private async void CreateEducation()
    {
        bool educationSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Education Edu = new Education
                {
                    EmployeeId = currentEmployee.Id,
                    SchoolId = educationDto.SchoolId,
                    Department = educationDto.Department,
                    StartDate = educationDto.StartDate,
                    EndDate = educationDto.EndDate
                };

            educationSaved = await _educationService.Create(Edu);

            if (educationSaved)
                EducationsList = await _educationService.GetEducationSchool(Edu.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }

    private async void CreateExperience()
    {
        bool experienceSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Experience Exp = new Experience
                {
                    EmployeeId = currentEmployee.Id,
                    CompanyName = experienceDto.CompanyName,
                    Position = experienceDto.Position,
                    CityId = Convert.ToInt32(experienceDto.CityId),
                    StartDate = experienceDto.StartDate,
                    EndDate = experienceDto.EndDate
                };

            experienceSaved = await _experienceService.Create(Exp);
            if (experienceSaved)
                ExperiencesList = await _experienceService.GetExperienceCompanyName(Exp.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }

    private async void CreateSkill()
    {
        bool skillSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Skill ski = new Skill
                {
                    EmployeeId = currentEmployee.Id,
                    Name = skillDto.Name,
                    Experience = skillDto.Experience,
                    Rating = skillDto.Rating
                };


            skillSaved = await _skilService.Create(ski);
            if (skillSaved)

                SkillsList = await _skilService.GetSkillName(ski.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }
    private async void CreateLanguage()
    {
        bool languageSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Language lan = new Language
                {
                    EmployeeId = currentEmployee.Id,
                    Name = languageDto.Name,
                    Rating = languageDto.Rating
                };

            languageSaved = await _languageService.Create(lan);

            if (languageSaved)
                LanguagesList = await _languageService.GetLanguageName(lan.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }

}