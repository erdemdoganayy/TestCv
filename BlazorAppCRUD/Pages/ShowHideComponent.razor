@page "/ShowHideComponent/"
@using BlazorAppCRUD.Data
@using BlazorAppCRUD.Dtos
@using BlazorAppCRUD.Persistence
@using BlazorAppCRUD.Utilities.Enums
@using EnumsNET
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using IronPdf;
@using System.Text
@using System.Globalization
@inject IJSRuntime jsRuntime


@inject IEmployeeService _employeeService
@inject IEducationService _educationService
@inject IExperienceServices _experienceService
@inject ISkillService _skilService
@inject ILanguageService _languageService
@inject ISchoolService _schoolService
@inject ISchoolDepartmentService _schoolDepartmentService
@inject ICityService _cityService
@inject ICountryService _countryService
@inject IApplicationDbContext _context



<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:#843e4c !important; font-size:20px">
        <b style="color:#FFF"> <i class="oi oi-pencil"></i> Education Info</b>
    </div>
    <div class="card-body">

        <EditForm Model="@educationDto" OnValidSubmit="@CreateEducation">
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-3">
                        <label for="exampleInputEmail1"><b>School Name</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="educationDto.SchoolName">
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Department</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="educationDto.Department">
                    </div>
                    <div class="col-md-2">
                        <label for="Country" class="control-label"><b>Country</b></label>
                        <select class="js-example-basic-single form-select" required name="state" @bind="educationDto.CountryId">

                            <option value="">-Select Country</option>

                            @if (countries != null)
                            {
                                @foreach (var country in countries)
                                {
                                    <option value=@country.Id>@country.Name</option>
                                }
                            }
                        </select>

                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Start Date</b></label>
                        <input type="date" class="form-control" required id="exampleInputEmail1" @bind="educationDto.StartDate" aria-describedby="emailHelp">
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>End Date</b></label>
                        <input type="date" class="form-control" required id="exampleInputEmail1" @bind="educationDto.EndDate" aria-describedby="emailHelp">
                    </div>
                    <div class="col-md-1">
                        <label for="exampleInputEmail1"></label>
                        <div class="form-group">
                            <input type="submit" class="btn btn-outline-success border-2"value="Add" />
                        </div>
                    </div>
                </div>

                <br />

            </div>
            <FirstListEducation EducationsList="@EducationsList" employee="employee" />
        </EditForm>


    </div>
</div>


<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:#843e4c !important; font-size:20px">
        <b style="color:#FFF"> <i class="oi oi-badge" style="font-size:25px"></i> Experience Info</b>
    </div>
    <div class="card-body">

        <EditForm Model="@experienceDto" OnValidSubmit="@CreateExperience">
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Company Name</b></label>
                        <input type="text" class="form-control" required id="exampleInputEmail1" @bind="experienceDto.CompanyName" aria-describedby="emailHelp">
                    </div>

                    <div class="col-md-2">
                        <label for="Country" class="control-label"><b>Country</b></label>
                        <select class="form-select" required aria-label="Default select example" @bind="experienceDto.CountryId">

                            <option value="">-Select Country</option>

                            @if (countries != null)
                            {
                                @foreach (var country in countries)
                                {
                                    <option value=@country.Id>@country.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>Start Date</b></label>
                        <input type="date" class="form-control" required id="exampleInputEmail1" @bind="experienceDto.StartDate" aria-describedby="emailHelp">
                    </div>
                    <div class="col-md-2">
                        <label for="exampleInputEmail1"><b>End Date</b></label>
                        <input type="date" class="form-control" required id="exampleInputEmail1" @bind="experienceDto.EndDate" aria-describedby="emailHelp">
                    </div>
                    <div class="col-md-2">
                        <label for="City" class="control-label"><b>Position</b></label>
                        <select class="form-select" required aria-label="Default select example" @onchange="DoStuff" text="@experienceDto.Position">

                            <option value="">-Select Position</option>

                            @if (@positionTypes != null)
                            {
                                @foreach (var item in positionTypes)
                                {
                                    <option value="@item">@item.AsString(EnumFormat.Description)</option>
                                }

                            }
                        </select>
                    </div>

                    <div class="col-md-2">
                        <label hidden="@ShowMyDiv" for="exampleInputEmail1"><b>Other Position</b></label>
                        <input type="text" hidden="@ShowMyDiv" class="form-control" id="exampleInputEmail1" @bind="@PositionValue" aria-describedby="emailHelp">
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-12">
                            <label for="exampleInputEmail1"><b>Brief Information About The Experience</b></label>
                            <textarea type="text" required class="form-control" id="biography" aria-describedby="emailHelp" @bind="experienceDto.BriefInformation">

                        </textarea>
                        </div>
                    </div>

                    <div class="col-md-1">
                        <label for="exampleInputEmail1">&nbsp</label>
                        <div class="form-group">
                            <input type="submit" class="btn btn-outline-success border-2" value="Add" />
                        </div>
                    </div>

                </div>
            </div>
            <br />
            <FirstListExperience ExperiencesList="@ExperiencesList" employee="employee" />
        </EditForm>

    </div>
</div>


<div class="card shadow  mb-5 bg-white rounded">
    <div class="card-header" style="background-color:#843e4c !important; font-size:20px">
        <b style="color:#FFF"><i class="oi oi-graph" style="font-size:25px"></i> Skill Info</b>
    </div>
    <div class="card-body">
        <EditForm Model="@skillDto" OnValidSubmit="@CreateSkill">
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-4">
                        <label for="exampleInputEmail1"><b>Skill Name</b></label>
                        <input type="text" class="form-control" required id="exampleInputEmail1" aria-describedby="emailHelp" @bind="skillDto.Name">
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="Gender" class="control-label"><b>Skill Rating</b></label>
                            <select class="form-select" required aria-label="Default select example" @bind="skillDto.Rating">
                                <option value=" ">-Select Rating</option>
                                <option value="Expert">Expert</option>
                                <option value="Experienced">Experienced</option>
                                <option value="Talented">Talented</option>
                                <option value="Beginning">Beginning</option>
                                <option value="Beginner">Beginner</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="form-group">
                            <label for="Gender" class="control-label"><b>Skill Short Info</b></label>
                            <input type="text" required class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="skillDto.ShortInfo">
                        </div>
                    </div>
                    <div class="col-md-1">
                        <label for="exampleInputEmail1">&nbsp</label>
                        <div class="form-group">
                            <input type="submit" class="btn btn-outline-success border-2" value="Add" />
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <FirstListSkill SkillsList="@SkillsList" employee="employee" />
        </EditForm>
    </div>
</div>


<div class="card shadow mb-5 bg-white rounded" >
    <div class="card-header" style="background-color:#843e4c !important; font-size:20px">
        <b style="color:#FFF"><i class="oi oi-book" style="font-size:25px"></i> Language Info</b>
    </div>
    <div class="card-body">

        <EditForm Model="@languageDto" OnValidSubmit="@CreateLanguage">
            <div class="form-group mt-3">
                <div class="row mt-2">
                    <div class="col-md-4">
                        <label for="exampleInputEmail1"><b>Language Name</b></label>
                        <input type="text" required class="form-control" id="exampleInputEmail1" @bind="languageDto.Name" aria-describedby="emailHelp">
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="Language" class="control-label"><b>Language Rating</b></label>
                            <select class="form-select" required aria-label="Default select example" @bind="languageDto.Rating">
                                <option value="">-Select Rating</option>
                                <option value="A1 (Beginner/Elementary)">A1 (Beginner/Elementary)</option>
                                <option value="A2 (Pre Intermediate)">A2 (Pre Intermediate)</option>
                                <option value="B1 (Intermediate)">B1 (Intermediate)</option>
                                <option value="B2 (Upper Intermediate)">B2 (Upper Intermediate)</option>
                                <option value="C1 (Advanced)">C1 (Advanced)</option>
                                <option value="C2 (Proficient)">C2 (Proficient)</option>

                            </select>

                        </div>
                    </div>
                    <div class="col-md-1">
                        <label for="exampleInputEmail1">&nbsp</label>
                        <div class="form-group">
                            <input type="submit" class="btn btn-outline-success border-2" value="Add" />
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <FirstListLanguage LanguagesList="@LanguagesList" employee="employee" />
        </EditForm>

    </div>

    @if (languageSaved)
    {
        <div class='col-md-12 text-center my-1'>
            <button style="color:white; text-align:center; background-color:#14735F" class="btn w-25" @onclick="CreatePdf">View & Download Cv</button>
        </div>
    }

</div>



@*@functions {
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
    if (firstRender)
    {
    await jsRuntime.InvokeVoidAsync("DropDownSearch");
    firstRender = false;
    }
    }
    }*@
@code {



    private bool ShowMyDiv { get; set; } = true;
    public string PositionValue { get; set; }
    bool languageSaved;

    [Parameter] public Employee employee { get; set; }
    [Parameter] public int EducationSchoolId { get; set; }

    List<Education> EducationsList = new List<Education>();
    List<Experience> ExperiencesList = new List<Experience>();
    List<Language> LanguagesList = new List<Language>();
    List<Skill> SkillsList = new List<Skill>();
    List<School> Schools = new List<School>();
    List<SchoolDepartment> SchoolDepartments = new List<SchoolDepartment>();
    List<Country> countries = new List<Country>();
    List<City> cities = new List<City>();
    List<PositionType> positionTypes = new List<PositionType>();

    Education education = new Education();
    Experience experience = new Experience();
    Skill skill = new Skill();
    Language language = new Language();

    EducationDto educationDto = new EducationDto();
    ExperienceDto experienceDto = new ExperienceDto();
    Skill skillDto = new Skill();
    Language languageDto = new Language();

    async void DoStuff(ChangeEventArgs e)
    {
        experienceDto.Position = e.Value.ToString();

        if (e.Value.ToString() == "Other")
            ShowMyDiv = false;
        else
            ShowMyDiv = true;

        await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
    }

    protected override async Task OnInitializedAsync()
    {
        positionTypes = Enum.GetValues(typeof(PositionType)).Cast<PositionType>().ToList();
        Schools = await _schoolService.GetSchools();
        SchoolDepartments = await _schoolDepartmentService.GetDepartments();
        countries = await _countryService.GetCountries();
        cities = await _cityService.GetCities();
    }

    protected override async Task OnParametersSetAsync()
    {
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);
        ExperiencesList = await _experienceService.GetExperienceCompanyName(currentEmployee.Id);
    }

    private async void CreateEducation()
    {
        bool educationSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Education Edu = new Education
                {
                    EmployeeId = currentEmployee.Id,
                    SchoolName = educationDto.SchoolName,
                    Department = educationDto.Department,
                    CountryId = educationDto.CountryId,
                    StartDate = educationDto.StartDate,
                    EndDate = educationDto.EndDate
                };

            educationSaved = await _educationService.Create(Edu);

            if (educationSaved)
                EducationsList = await _educationService.GetEducationSchool(Edu.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });

        }
    }

    private async void CreateExperience()
    {
        bool experienceSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Enum.TryParse(experienceDto.Position, out PositionType positionType);

            var positionTypeDescription = positionType.AsString(EnumFormat.Description);

            Experience Exp = new Experience
                {
                    EmployeeId = currentEmployee.Id,
                    CompanyName = experienceDto.CompanyName,
                    Position = positionType == PositionType.Other ? PositionValue : positionTypeDescription,
                    BriefInformation = experienceDto.BriefInformation,
                    CountryId = Convert.ToInt32(experienceDto.CountryId),
                    StartDate = experienceDto.StartDate,
                    EndDate = experienceDto.EndDate
                };

            experienceSaved = await _experienceService.Create(Exp);
            if (experienceSaved)
                ExperiencesList = await _experienceService.GetExperienceCompanyName(Exp.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }

    private async void CreateSkill()
    {
        bool skillSaved;
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Skill ski = new Skill
                {
                    EmployeeId = currentEmployee.Id,
                    Name = skillDto.Name,
                    ShortInfo = skillDto.ShortInfo,
                    Rating = skillDto.Rating
                };


            skillSaved = await _skilService.Create(ski);
            if (skillSaved)

                SkillsList = await _skilService.GetSkillName(ski.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }
    private async void CreateLanguage()
    {
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);

        if (currentEmployee != null)
        {
            Language lan = new Language
                {
                    EmployeeId = currentEmployee.Id,
                    Name = languageDto.Name,
                    Rating = languageDto.Rating
                };

            languageSaved = await _languageService.Create(lan);

            if (languageSaved)
                LanguagesList = await _languageService.GetLanguageName(lan.EmployeeId);

            await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }

    }
    private async void CreatePdf()
    {
        var currentEmployee = await _employeeService.GetEmployeeByEmail(employee.Email);
        var employees = await _employeeService.GetLastEmployee(currentEmployee.Id);
        var Renderer = new ChromePdfRenderer();

        var sb = new StringBuilder();
        sb.Append("<html><head></head><body>");
        sb.Append("<div class='container' style='width: 100%; height: 100%;'>");
        sb.Append("<div class='left' style='background-color: #6DE0C5; width: 0.2%; height: 2200px; float: left;'>");
        sb.Append(" <div class='wrapper' style='width: 90%;height: 100vh; margin: auto;'>");
        sb.Append("<div class='logo' style='width: 100%; font-size: 50px; margin-top: 4rem; margin-left: 4rem;'>");
        sb.Append("<br>");
        sb.Append("<br>");
        sb.Append("</div>");
        // sb.Append("<p style='margin-top: 10rem; color: #fbfcfd; font-size: 1rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'>B I O G R A P H Y</p>");
        // sb.Append("<hr style=' border: 1px solid #371a2d; margin-top: 1.7rem;'>");

        // sb.Append("<p style='margin-top: 9.5rem; color: #fbfcfd; font-size: 1rem; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'> P E R S O N A L</p>");
        //  sb.Append(" <hr style='border: 1px solid #371a2d; margin-top: 2rem;'>");

        // sb.Append("<p style='margin-top: 15rem; color: #fbfcfd; font-size: 1rem; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'> K E Y &nbsp; S K I L L S </p>");
        // sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1.5rem;'>");

        // sb.Append("<p style='margin-top: 13rem; color: #fbfcfd; font-size: 1rem; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'>C O N T A C T </p>");
        //sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1.5rem;'>");

        // sb.Append("<p style='margin-top: 25.5rem; color: #fbfcfd; font-size: 1rem; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'>E X P E R I E N C E S</p>");
        //  sb.Append("<hr style=' border: 1px solid #371a2d; margin-top: 1.5rem;'>");

        //sb.Append("<p style='margin-top: 9.5rem; color: #fbfcfd; font-size: 1rem; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'>E D U C A T I O N S</p>");
        // sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1.5rem;'>");
        // sb.Append("<p style='margin-top: 9.5rem; color: #fbfcfd; font-size: 1rem; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'>L A N G U A G E S</p>");
        // sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1.5rem;'>");

        sb.Append("</div>");
        sb.Append("</div>");
        sb.Append("<div class='right' style='width: 98%; height: 100%; float: left;'>");
        sb.Append("<div class='wrapper' style='width: 90%; margin: auto;'>");
        sb.Append("<div class='personelInfo' style='margin-top: 10rem;'>");
        sb.Append("<img style='float: right; margin-top: -8rem;' src='./hepapilogo.png' width='120'>");
        sb.Append("<strong style='font-size: 3rem; margin-top:-6rem !important; position:absolute; color: #843e4c;'>" + CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employees.Name)  + " " +  CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employees.Surname) + "</strong>");
        sb.Append("<p style='color: #3bd6b3; font-size: 1.4rem;'>" +  CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employees.JobDescription) + "</p>");
        sb.Append("<p style=' margin-top:3rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>B I O G R A P H Y</b></p>");
        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important;'>");
        sb.Append("<p style='color:black'>" + employees.ShortInfo + "</p>");
        sb.Append("</div>");
        sb.Append("<p style=' margin-top:3rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>P E R S O N A L &nbsp; I N F O</b></p>");
        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important;'>");
        sb.Append("<p style='color:black; margin-top: 2rem;'>Birth Date : "+employees.BirthDate.Date.ToShortDateString()+"</p>");
        sb.Append("<p style='color:black'>Nationality : " + employees.Country.Name + "</p>");
        sb.Append("<p style='color:black'>Location : " + employees.Country.Name + "</p>");
        sb.Append("<p style=' margin-top:3rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>K E Y &nbsp; S K I L L S</b></p>");
        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important; margin-bottom:2rem'>");



        foreach (var emp in employees.Skills)
        {
            sb.Append("<span style='margin-top:3rem !important; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif; color:#371a2d;'><b>" + emp.Name.ToUpper() + "</b> : " + emp.Rating + " &nbsp;&nbsp;&nbsp;&nbsp;</span>");
        }


        foreach (var emp in employees.Skills)
        {
            sb.Append("<p style='color:black; margin-top: 1rem;'><b>" + emp.Name.ToUpper() + " :</b> " + emp.ShortInfo + "<br></p>");

        }


        sb.Append("<p style=' margin-top:3rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>C O N T A C T </b></p>");
        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important'>");
        sb.Append("<p style='color:black; margin-top: 2rem;'>Phone : " + employees.Phone + "</p>");
        sb.Append("<p style='color:black'>Mail: " + employees.Email + "</p>");
        sb.Append("<p style='color:black'>Web : " + employees.Website + "</p>");
        sb.Append("<p style='color:black'>Linkedin : " + employees.Linkedin + "</p>");

        sb.Append("<p style=' margin-top:3rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>E X P E R I E N C E</b> </p>");
        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important;'>");
        foreach (var emp in employees.Experiences)
        {
            sb.Append("<p style=' margin-top: 2rem; margin-bottom: -1.8rem; color: #843e4c; font-size: 0.7rem; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'>" + emp.StartDate.Date.ToShortDateString() + " - " + emp.EndDate.Date.ToShortDateString() + "</p>");
            sb.Append("<span style=' margin-top: 2rem; width: 100%; float: right; color: #3bd6b3; font-size: 0.9rem; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'>" +  CultureInfo.CurrentCulture.TextInfo.ToTitleCase(emp.CompanyName) + ", " + emp.Country.Name + "</span>");
            sb.Append("<div style='width:100%'>");
            sb.Append("<span style=' margin-top: 0.5rem; width: 100%; float: left; color: #3bd6b3; font-size: 1.1rem; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'><b>" + emp.Position + "</b></span>");
            sb.Append("<p style='color:black; width: 100%; text-align:left; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'>" + emp.BriefInformation + "</p>");
            sb.Append("</div>");
        }
        sb.Append("<p style=' margin-top:3rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>E D U C A T I O N S</b></p>");

        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important;'>");
        foreach (var emp in employees.Educations)
        {

            sb.Append("<p style=' margin-top: 2rem; margin-bottom: -1.8rem; color: #843e4c; font-size: 0.7rem; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'>" + emp.StartDate.Date.ToShortDateString() + " - " + emp.EndDate.Date.ToShortDateString() + "</p>");
            sb.Append("<span style=' margin-top: 2rem; width: 100%; float: right; color: #b1838a; font-size: 0.9rem; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'>" +  CultureInfo.CurrentCulture.TextInfo.ToTitleCase(emp.SchoolName) + ", " + emp.Country.Name + "</span>");
            sb.Append("<div style='width:100%'>");
            sb.Append("<span style=' margin-top: 0.2rem; width: 100%; float: left; color: #3bd6b3; font-size: 1rem; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'><b>" +  CultureInfo.CurrentCulture.TextInfo.ToTitleCase(emp.Department) + "</b></span>");
            sb.Append("<p style='color:#371a2d; width: 100%; text-align:left; font-family:'-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;'> &nbsp;</p>");
            sb.Append("</div>");


        }
        sb.Append("<p style=' margin-top:2rem; color: #000000; font-size: 0.8rem;  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;'><b>L A N G U A G E S</b></p>");
        sb.Append("<hr style='border: 1px solid #371a2d; margin-top: 1rem !important;'>");
        foreach (var emp in employees.Languages)
        {
            sb.Append("<p style='color:#black; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif; margin-top: 1rem;'><strong>" +  CultureInfo.CurrentCulture.TextInfo.ToTitleCase(emp.Name) + "</strong> : " + emp.Rating + "</p>");
        }

        sb.Append("</div>");

        sb.Append("</div>");
        sb.Append("<div class='enson' style='background-color: #6DE0C5; width: 0.2%; height: 2200px; float: right;'>");
        sb.Append("</div>");


        sb.Append("</div>");



        sb.Append("</body></html>");
        string url = "/" + employees.Name + employees.Surname + ".pdf";
        Renderer.RenderHtmlAsPdf(sb.ToString()).SaveAs("./wwwroot" + url);
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}