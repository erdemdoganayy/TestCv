@layout UsersLayout
@page "/Users"
@using BlazorAppCRUD.Data
@inject IEmployeeService _employeeService
@inject IJSRuntime jsRuntime
@using BlazorAppCRUD.Persistence
@inject IApplicationDbContext _context
<div class="container">
    <h3 class="text-center">Hepapi Cv Users</h3>
    <div class="wrapper m-5">

        <table id="myTable" class="display">
            <thead>
                <tr>
                    <th>Column 1</th>
                    <th>Column 2</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    
                <tr>
                        <td>@employee.Name</td>
                        <td>@employee.Name</td>

                    </tr>
                }
                
            </tbody>
        </table>

        @* <table id="myTable" class="table table-striped table-bordered table-sm" cellspacing="0" width="100%">
            <thead>
            <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Age</th>
            <th>Start date</th>
            <th>Salary</th>
            </tr>
            </thead>
            <tbody>
            @if (employees == null)
            {
            <p>
            <em>
            Loading...
            </em>
            </p>
            }
            else
            {
            @foreach (var employee in employees)
            {
            <tr>
            <td>@employee.Name</td>
            <td>@employee.Name</td>
            <td>@employee.Name</td>
            <td>@employee.Name</td>
            <td>@employee.Name</td>
            <td>@employee.Name</td>
            </tr>
            }

            }

            </tbody>
            <tfoot>
            <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Age</th>
            <th>Start date</th>
            <th>Salary</th>
            </tr>
            </tfoot>
            </table>*@
    </div>
</div>


@functions {
     public string id { get; set; } = "DataTable-" + Guid.NewGuid().ToString();
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<string>("DataTableSearch", new object[] { $"#{id}"});
            firstRender = false;
        }
    }
 }

@code {
    List<Employee> employees = new List<Employee>();
    protected override async Task OnInitializedAsync()
    {

        employees = await _employeeService.GetEmployees();
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }



}
